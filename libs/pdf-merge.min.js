const uploadArea=document.getElementById("upload-area"),fileInput=document.getElementById("file-input"),progressBar=document.getElementById("progress-bar"),feedback=document.getElementById("feedback"),filenameInput=document.getElementById("filename-input");async function handleFiles(){const e=Array.from(fileInput.files);if(validateFiles(e)){setUIForProcessing(!0),feedback.textContent="Merging...";try{const t=await mergeFiles(e);download(t,`${getCustomFilename()}.pdf`,"application/pdf"),feedback.textContent="Merge completed! Downloading..."}catch(e){feedback.textContent="An error occurred: "+e.message,console.error(e)}finally{setUIForProcessing(!1)}}}function validateFiles(e){return!!e.every((e=>"application/pdf"===e.type))||(feedback.textContent="Please upload only PDF files.",!1)}async function mergeFiles(e){const t=await PDFLib.PDFDocument.create();for(let n=0;n<e.length;n++){const a=e[n],o=await a.arrayBuffer(),r=await PDFLib.PDFDocument.load(o);(await t.copyPages(r,r.getPageIndices())).forEach((e=>t.addPage(e))),updateProgressBar(n,e.length)}return t.save()}function updateProgressBar(e,t){progressBar.style.width=(e+1)/t*100+"%"}function getCustomFilename(){return filenameInput.value.trim()||"merged"}function download(e,t,n){const a=URL.createObjectURL(new Blob([e],{type:n})),o=document.createElement("a");o.href=a,o.download=t,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(a)}function setUIForProcessing(e){uploadArea.disabled=e,progressBar.style.display=e?"block":"none",progressBar.style.width="0%",e||(fileInput.value="")}uploadArea.addEventListener("click",(()=>fileInput.click())),fileInput.addEventListener("change",handleFiles),uploadArea.addEventListener("dragover",(e=>e.preventDefault())),uploadArea.addEventListener("drop",(e=>{e.preventDefault(),fileInput.files=e.dataTransfer.files,handleFiles()}));